from fastapi import Depends, HTTPException, status
from services.auth_service import get_current_user
from models import User


def required_role(required_roles: list[str] | str):
    """Create a FastAPI dependency for role-based access control.

    A factory function that creates a FastAPI dependency for role-based access control.

    This function returns a `role_checker` dependency that can be used in endpoint
    decorators to ensure the current authenticated user has one of the specified
    roles. If the user's role is not in the required list, it raises a 403 Forbidden
    HTTPException.

    Args:
        required_roles (list[str] | str): A single role string or a list of role strings that are allowed to access the endpoint.

    Returns:
        A callable dependency that checks the user's role and returns the User object.
    """
    # roles_required = (lambda required_roles: [required_role] if isinstance(required_roles,str)  else required_role)(required_roles)
    roles_required = (
        [required_roles] if isinstance(required_roles, str) else required_roles
    )

    # print(roles_required)
    def role_checker(user: User = Depends(get_current_user)):
        """Check the user's role.

        The actual dependency that checks the user's role.

        This function is generated by `required_role` and is not meant to be called directly.
        It relies on the `get_current_user` dependency to get the authenticated user.

        Args:
            user (User): The User object, automatically injected by FastAPI's `get_current_user` dependency.

        Raises:
            HTTPException: If the user's role is not in the `roles_required` list.

        Returns:
            User: The authenticated User object if the role check passes.
        """
        role = user.role.title
        # print(user)
        if user.role.title not in roles_required:
            raise HTTPException(
                status_code=status.HTTP_403_FORBIDDEN,
                detail=f"Access denied: '{role}' role required: {roles_required}",
            )
        return user

    return role_checker


admin_only = required_role("Admin")
user_only = required_role(["Admin", "User"])
